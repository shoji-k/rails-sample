<p id="error"></p>

<%= form_for(editor, remote: true) do |f| %>

  <label class="checkbox-inline">
    <%= check_box_tag "editor[input_mode]", 1, true,
      data: { toggle: "toggle", on: "LaTex code", off: "view", onstyle: "primary", offstyle: "danger" },
      class: "toggle"
     %>
  </label>

  <% if editor.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(editor.errors.count, "error") %> prohibited this editor from being saved:</h2>

      <ul>
      <% editor.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :title %>
    <%= f.text_field :title %>
  </div>

  <div class="field">
    <%= f.label :body %>
    <%= f.cktext_area :body %>
  </div>

  <div class="field">
    <button type="button" id="history-back" class="btn btn-default">◀︎</button>
    <button type="button" id="history-forward" class="btn btn-default">▶︎︎</button>
    <button type="button" class="btn btn-default" data-toggle="button" aria-pressed="false" autocomplete="off"><b>b</b></button>
    <button type="button" class="btn btn-default">pt</button>
    <button type="button" class="btn btn-default">font</button>
    <button type="button" class="btn btn-default" data-toggle="button" aria-pressed="false" autocomplete="off"><i>italic</i></button>
    <button type="button" class="btn btn-default" data-toggle="button" aria-pressed="false" autocomplete="off"><u>underline</u></button>
    <button type="button" class="btn btn-default" data-toggle="button" aria-pressed="false" autocomplete="off"><li>list</li></button>
    <button type="button" class="btn btn-default">insert</button>
  </div>

  <div class="field">
    <%= f.label :tex %>
    <%= f.text_area :tex, id: 'tex_editor' %>
  </div>

  <div class="actions update-box">
    <%= f.submit 'Update Editor', id: 'update' %>
  </div>
<% end %>

<!-- <button id="update">update by ajax</button> -->
<button id="tex-to-html">tex to html</button>
<button id="html-to-tex">html to tex</button>

<script>
$(function() {
  $('#toggle-body').change(function() {
    var latex_mode = $(this).prop('checked');
    if (latex_mode) {
      console.log('latex mode');
    } else {
      console.log('html mode');
    }
  });

  var AUTOSAVEINTERVAL = 2000;
  var editor = window.CKEDITOR.instances['editor_body'];

  <% if !@ajaxUrl.nil? %>
  var change_flg = 0;
  editor.on('change', function() {
    change_flg = 1;
  });
  // autosave
  setInterval(function() {
    if (change_flg == 1) {
      console.log(1);
      change_flg = 0;
      update();
    }
  }, AUTOSAVEINTERVAL);

  function update() {
    var that = this;
    var title = $('#editor_title').val();
    var body = editor.getData();

    $('#error').text('');
    if (! title) {
      $('#error').text('タイトルを入力してください');
      return false;
    }

    $(this).prop('disabled', true)
      .after('<div id="spin" class="spinner"></div>')
      .submit();
  };

  $('#update').on('click', update);
  <% end %>

  $(document).on('turbolinks:load', function() {
    $('input[type="checkbox"].toggle').bootstrapToggle();
  });

  var tex = CodeMirror.fromTextArea(document.getElementById('tex_editor'), {
    mode: "text/x-stex",
    lineNumbers: true,
    indentUnit: 4,
    dragDrop: true,
    viewportMargin: 100,
    buttons: [
      {
        class: 'btn btn-default',
        label: '◀︎',
        callback: function (cm) {
          var doc = cm.getDoc();
          doc.undo();
        }
      },
      {
        class: 'btn btn-default',
        label: '▶',
        callback: function (cm) {
          var doc = cm.getDoc();
          doc.redo();
        }
      },
      {
        hotkey: 'Ctrl-B',
        class: 'btn btn-default bold',
        label: '<b>b</b>',
        callback: function (cm) {
          var selection = cm.getSelection();
          cm.replaceSelection('{\\bf ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        class: 'btn btn-default',
        label: 'pt',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('{\\fontsize{10pt}{0pt}\\selectfont ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        class: 'btn btn-default',
        label: 'font',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('\\usepackage{ ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        hotkey: 'Ctrl-I',
        class: 'btn btn-default italic',
        label: '<i>italic</i>',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('{\\it ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        class: 'btn btn-default',
        label: '<u>underline</u>',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('\\[\n \\underline{ ' + selection + '}\n\\]');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line - 1, 13);
          }
        }
      },
      {
        class: 'btn btn-default ul',
        label: '・list',
        callback: function (cm) {
          var str = '\\begin{itemize}\n \\item ' + cm.getSelection() + '\n \\item \n\\end{itemize}';
          cm.replaceSelection(str);
        }
      },
      {
        class: 'btn btn-default ol',
        label: '1. list',
        callback: function (cm) {
          var str = '\\begin{enumerate}\n \\item ' + cm.getSelection() + '\n \\item \n\\end{enumerate}';
          cm.replaceSelection(str);
        }
      }
    ]
  });

  var doc = tex.getDoc();
  $('#history-back').on('click', function() {
    doc.undo();
  });
  $('#history-forward').on('click', function() {
    doc.redo();
  });
});
(function($){
  'use strict';
  $.fn.ready = function(func){
    $(document).on('turbolinks:load', function () {
      func($);
    });
  };
})(jQuery);
</script>
