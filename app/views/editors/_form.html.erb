<style>
.cke_top {
  display: none;
}
</style>

<p id="error"></p>

<%= form_for Photo.new, :html => { :multipart => true, :id => "fileupload"  } do |f| %>
<div class="row fileupload-buttonbar">
  <div class="span7">
    <%= f.text_field :document_id %>
    <%= f.file_field :name %>
  </div>
  <div class="span5">
    <div id="progress" class="progress">
        <div class="progress-bar progress-bar-success"></div>
    </div>
  </div>
</div>
<br>
<div id="files" class="files"></div>
<% end %>
<div id="modal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"></div>
<%= form_for(editor, remote: true) do |f| %>

  <label class="checkbox-inline">
    <%= check_box_tag "editor[input_mode]", 1, true,
      data: { toggle: "toggle", on: "LaTex code", off: "view", onstyle: "primary", offstyle: "danger" },
      class: "toggle"
     %>
  </label>

  <% if editor.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(editor.errors.count, "error") %> prohibited this editor from being saved:</h2>

      <ul>
      <% editor.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :title %>
    <%= f.text_field :title %>
  </div>

  <div class="field">
    <%= f.label :body %>
    <%= button_tag "◀", type: 'button', id: 'ck_back', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "▶", type: 'button', id: 'ck_forward', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "<b>b</b>".html_safe, type: 'button', id: 'ck_bold', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "<i>italic</i>".html_safe, type: 'button', id: 'ck_italic', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "<u>underline</u>".html_safe, type: 'button', id: 'ck_underline', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "・list", type: 'button', id: 'ck_ul', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "1.list", type: 'button', id: 'ck_ol', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "find", type: 'button', id: 'ck_find', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "replace", type: 'button', id: 'ck_replace', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "image", type: 'button', id: 'ck_image', class: 'btn btn-default', tabindex: -1 %>
    <%= button_tag "abstract", type: 'button', id: 'ck_abstract', class: 'btn btn-default', tabindex: -1 %>
    <%= f.cktext_area :body %>
  </div>

  <div class="field">
    <%= f.label :tex %>
    <%= f.text_area :tex, id: 'tex_editor' %>
  </div>

  <div class="actions update-box">
    <%= f.submit 'Update Editor', id: 'update' %>
  </div>
<% end %>

<!-- <button id="update">update by ajax</button> -->
<button id="tex-to-html">tex to html</button>
<button id="html-to-tex">html to tex</button>

<script>
'use strict';
$(function() {
  $('#toggle-body').change(function() {
    var latex_mode = $(this).prop('checked');
    if (latex_mode) {
      console.log('latex mode');
    } else {
      console.log('html mode');
    }
  });

  var AUTOSAVEINTERVAL = 2000;
  var editor = window.CKEDITOR.instances['editor_body'];

  <% if !@ajaxUrl.nil? %>
  var change_flg = 0;
  editor.on('change', function() {
    change_flg = 1;
  });
  // autosave
  setInterval(function() {
    if (change_flg == 1) {
      console.log(1);
      change_flg = 0;
      update();
    }
  }, AUTOSAVEINTERVAL);

  function update() {
    var that = this;
    var title = $('#editor_title').val();
    var body = editor.getData();

    $('#error').text('');
    if (! title) {
      $('#error').text('タイトルを入力してください');
      return false;
    }

    $(this).prop('disabled', true)
      .after('<div id="spin" class="spinner"></div>')
      .submit();
  };

  $('#update').on('click', update);
  <% end %>

  $(document).on('turbolinks:load', function() {
    $('input[type="checkbox"].toggle').bootstrapToggle();
  });

  var tex = CodeMirror.fromTextArea(document.getElementById('tex_editor'), {
    mode: "text/x-stex",
    lineNumbers: true,
    indentUnit: 4,
    dragDrop: true,
    viewportMargin: 100,
    buttons: [
      {
        class: 'btn btn-default',
        label: '◀︎',
        callback: function (cm) {
          var doc = cm.getDoc();
          doc.undo();
        }
      },
      {
        class: 'btn btn-default',
        label: '▶',
        callback: function (cm) {
          var doc = cm.getDoc();
          doc.redo();
        }
      },
      {
        hotkey: 'Ctrl-B',
        class: 'btn btn-default bold',
        label: '<b>b</b>',
        callback: function (cm) {
          var selection = cm.getSelection();
          cm.replaceSelection('{\\bf ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        class: 'btn btn-default',
        label: 'pt',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('{\\fontsize{10pt}{0pt}\\selectfont ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        class: 'btn btn-default font',
        label: 'font',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('\\usepackage{ ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        hotkey: 'Ctrl-I',
        class: 'btn btn-default italic',
        label: '<i>italic</i>',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('{\\it ' + selection + '}');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - 1);
          }
        }
      },
      {
        class: 'btn btn-default underline',
        label: '<u>underline</u>',
        callback: function (cm) {
        var selection = cm.getSelection();
          cm.replaceSelection('\\[\n \\underline{ ' + selection + '}\n\\]');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line - 1, 13);
          }
        }
      },
      {
        class: 'btn btn-default ul',
        label: '・list',
        callback: function (cm) {
          var str = '\\begin{itemize}\n \\item ' + cm.getSelection() + '\n \\item \n\\end{itemize}';
          cm.replaceSelection(str);
        }
      },
      {
        class: 'btn btn-default ol',
        label: '1. list',
        callback: function (cm) {
          var str = '\\begin{enumerate}\n \\item ' + cm.getSelection() + '\n \\item \n\\end{enumerate}';
          cm.replaceSelection(str);
        }
      },
      {
        class: 'btn btn-default find',
        label: 'find',
        callback: function (cm) {
          cm.execCommand('find');
        }
      },
      {
        class: 'btn btn-default replace',
        label: 'replace',
        callback: function (cm) {
          cm.execCommand('replace');
        }
      },
      {
        class: 'btn btn-default image',
        label: 'image',
        callback: function (cm) {
          $('#photo_name').click();
        }
      },
      {
        class: 'btn btn-default abstract',
        label: 'abstract',
        callback: function (cm) {
          var str = '\\begin{abstract}' + cm.getSelection() + '\\end{abstract}';
          cm.replaceSelection(str);
        }
      }
    ]
  });

  var doc = tex.getDoc();
  $('#history-back').on('click', function() {
    doc.undo();
  });
  $('#history-forward').on('click', function() {
    doc.redo();
  });

  var url = $('#fileupload').prop('action');
  $('#fileupload').fileupload({
    url: url,
    dataType: 'json',
    done: function (e, data) {
      console.log(data);
      $.each(data.result, function (index, file) {
        var str = '\\begin{figure}[h]\n \\includegraphics['+file.url+']{}\n \\caption{}\n \\label{}\n\\end{figure}';
        tex.replaceSelection(str);
        $('<p/>').text(file.name + ' [' + file.url + ']').appendTo('#files');
      });
    },
    progressall: function (e, data) {
      var progress = parseInt(data.loaded / data.total * 100, 10);
      $('#progress .progress-bar').css(
        'width',
        progress + '%'
      );
    }
  }).prop('disabled', !$.support.fileInput)
    .parent().addClass($.support.fileInput ? undefined : 'disabled');

  $('#show_btn').on('click', function() {
    get_all_photos();
  });

  function get_all_photos() {
    $.ajax({
      type: 'GET',
      cache: false,
      url: '/photos',
      dataType: 'json',
      success: function(res){
        console.log(res);
        $.each(res['files'], function(i, p) {
          $('#photos').append($('<li></li>').append(p.name));
        });
      },
      error: function(res){
        alert('エラーが発生しました');
      }
    });
  }

  $('#ck_back').on('click', function() {
    $('#cke_87').click();
  });
  $('#ck_forward').on('click', function() {
    $('#cke_88').click();
  });
  $('#ck_bold').on('click', function() {
    $('#cke_94').click();
  });
  $('#ck_italic').on('click', function() {
    $('#cke_95').click();
  });
  $('#ck_underline').on('click', function() {
    $('#cke_96').click();
  });
  $('#ck_ul').on('click', function() {
    $('#cke_91').click();
  });
  $('#ck_ol').on('click', function() {
    $('#cke_26').click();
  });
  $('#ck_find').on('click', function() {
    // todo:
  });
  $('#ck_replace').on('click', function() {
    // todo:
  });
  $('#ck_image').on('click', function() {
    $('#cke_102').click();
  });
});
(function($){
  'use strict';
  $.fn.ready = function(func){
    $(document).on('turbolinks:load', function () {
      func($);
    });
  };
})(jQuery);
</script>

